# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RSDlToolDialog
                                 A QGIS plugin
 This is Plugin use DL in Rs
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-08-31
        git sha              : $Format:%H$
        copyright            : (C) 2022 by libin
        email                : ts20160039a31@edu.cumt.cn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.gui import QgsFileWidget
from qgis.core import QgsMapLayerProxyModel, QgsProviderRegistry
from PyQt5.QtWidgets import (
    QFileDialog
)
from qgis.core import (
    QgsProject, QgsVectorLayer, QgsMapLayer, QgsRasterLayer, QgsMapLayerType, Qgis
)

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'RsDlTool_dialog_base.ui'))


class RSDlToolDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(RSDlToolDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        # Restrict the combo boxes to their relevant layer types
        # self.vDSCombo.setFilters(QgsMapLayerProxyModel.PolygonLayer) #label could be shp png tif
        self.vDSMaskCombo.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.rDSACombo.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.rDSBCombo.setFilters(QgsMapLayerProxyModel.RasterLayer)
        # set status
        self.tabWidget.setCurrentIndex(0)
        self.rDSBCombo.setEnabled(False)
        self.selectRDSB.setEnabled(False)
        self.vDSMaskCombo.setEnabled(False)
        self.selectVDSMask.setEnabled(False)
        # ------- batch
        self.mQgsFileWidget_V.setEnabled(False)  # fileWidgetButtonVisible(False)
        self.mQgsFileWidget_RA.setEnabled(False)
        self.mQgsFileWidget_RB.setEnabled(False)
        # -------

        # ------- check
        # close batch processing
        self.useBatchCheck.stateChanged.connect(
            lambda is_checked: self.close_batch_processing(is_checked)
        )
        # close change processing
        self.useChangeCheck.stateChanged.connect(
            lambda is_checked: self.close_change_processing(is_checked)
        )
        # close mask processing
        self.checkBoxMask.stateChanged.connect(
            lambda is_checked: self.vDSMaskCombo.setEnabled(is_checked)
        )
        self.checkBoxMask.stateChanged.connect(
            lambda is_checked: self.selectVDSMask.setEnabled(is_checked)
        )
        # --init
        self.init_dataset_maker()

        # Connect buttons common
        # self.selectRDSA.clicked.connect(self.select_tif1_dataset)
        # self.selectRDSB.clicked.connect(self.select_tif2_dataset)
        # self.selectVDSMask.clicked.connect(self.select_mask_dataset)
        #
        # # Restrict the raster combo to GDAL. This won't itself narrow it down to GeoTIFF alone
        # # But it'll filter out other admittedly irrelevant providers
        # excluded_providers = QgsProviderRegistry.instance().providerList()
        # excluded_providers.remove('gdal')
        # self.rasterCombo.setExcludedProviders(excluded_providers)
        # # Add the 'virtual' raster layers
        # self.rasterCombo.setAdditionalItems(('Mapbox Satellite', 'Custom URL (in Settings)'))

    def init_dataset_maker(self):
        self.blockCombo.setCurrentIndex(3)
        self.StrideCombo.setOpacity(0.0)
        self.checkBoxMutiCls.setEnabled(False)
        self.mQfwDataset_ClassCfg.setEnabled(False)
        self.checkBoxSB_2.stateChanged.connect(lambda is_checked: self.checkBoxSB.setEnabled(is_checked))
        self.checkBoxSB_2.stateChanged.connect(lambda is_checked: self.vDSCombo.setEnabled(is_checked))
        self.checkBoxSB_2.stateChanged.connect(lambda is_checked: self.selectVDS.setEnabled(is_checked))
        self.checkBoxSB_2.stateChanged.connect(lambda is_checked: self.mQgsFileWidget_V.setEnabled(is_checked) if self.useBatchCheck.isChecked() else None)
        self.checkBoxMutiCls_2.stateChanged.connect(
            lambda is_checked: self.checkBoxMutiCls.setEnabled(is_checked))
        self.checkBoxMutiCls_2.stateChanged.connect(
            lambda is_checked: self.mQfwDataset_ClassCfg.setEnabled(is_checked))

    def close_batch_processing(self, is_checked):
        if self.useChangeCheck.isChecked():
            self.mQgsFileWidget_RB.setEnabled(is_checked)
        if self.checkBoxSB_2.isChecked():
            self.mQgsFileWidget_V.setEnabled(is_checked)  # fileWidgetButtonVisible(False)
        self.mQgsFileWidget_RA.setEnabled(is_checked)

    def close_change_processing(self, is_checked):
        self.rDSBCombo.setEnabled(is_checked)
        self.selectRDSB.setEnabled(is_checked)
        if self.useBatchCheck.isChecked():
            self.mQgsFileWidget_RB.setEnabled(is_checked)
